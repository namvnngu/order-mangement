{"version":3,"sources":["pages/Home.tsx","components/SearchBar.tsx","components/Calendar.tsx","pages/Orders.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","className","to","SearchBar","htmlFor","type","placeholder","Calendar","useState","startDate","setStartDate","endDate","setEndDate","focusedInput","setFocusedInput","startDateId","endDateId","showDefaultInputIcon","onDatesChange","period","onFocusChange","small","Orders","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAceA,EAXF,WACX,OACE,yBAAKC,UAAU,kBACb,wEACA,6BACE,kBAAC,IAAD,CAAMC,GAAG,WAAT,cADF,6B,SCYSC,EAhBG,WAChB,OACE,yBAAKF,UAAU,mCACb,2BAAOG,QAAQ,SAASH,UAAU,+BAChC,kBAAC,IAAD,CAAUA,UAAU,gBADtB,UAIA,2BACEI,KAAK,OACLJ,UAAU,wBACVK,YAAY,yC,iCC4BLC,EA7BE,WAAO,IAAD,EACaC,mBAAqB,MADlC,mBACdC,EADc,KACHC,EADG,OAESF,mBAAqB,MAF9B,mBAEdG,EAFc,KAELC,EAFK,OAGmBJ,mBAAuB,MAH1C,mBAGdK,EAHc,KAGAC,EAHA,KAYrB,OACE,oCACE,kBAAC,kBAAD,CACEL,UAAWA,EACXM,YAAY,YACZJ,QAASA,EACTK,UAAU,UACVC,sBAAsB,EACtBC,cAhBN,SAA0BC,GACxBT,EAAaS,EAAOV,WACpBG,EAAWO,EAAOR,UAedE,aAAcA,EACdO,cAbN,SAA6BP,GAC3BC,EAAgBD,IAaZQ,OAAO,MCtBAC,EATA,WACb,OACE,yBAAKrB,UAAU,oBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCSSsB,MAXf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,IAAIC,UAAW1B,IACjC,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,UAAUC,UAAWJ,OCC3BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7c0a8e88.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n  return (\n    <div className=\"home-container\">\n      <h1>Welcome to order management ðŸ“¦</h1>\n      <div>\n        <Link to=\"/orders\">Click here</Link> to view the order page\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { GoSearch } from \"react-icons/go\";\n\nconst SearchBar = () => {\n  return (\n    <div className=\"search-container form-group row\">\n      <label htmlFor=\"search\" className=\"search-field col-form-label\">\n        <GoSearch className=\"search-icon\" />\n        Search\n      </label>\n      <input\n        type=\"text\"\n        className=\"form-control col-sm-9\"\n        placeholder=\"Enter keywords to find your orders\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import \"react-dates/initialize\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport { DateRangePicker, FocusedInputShape } from \"react-dates\";\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\n\ntype FocusedInput = FocusedInputShape | null;\ntype MomentType = moment.Moment | null;\ninterface Period {\n  endDate: moment.Moment | null;\n  startDate: moment.Moment | null;\n}\nconst Calendar = () => {\n  const [startDate, setStartDate] = useState<MomentType>(null);\n  const [endDate, setEndDate] = useState<MomentType>(null);\n  const [focusedInput, setFocusedInput] = useState<FocusedInput>(null);\n  function handleDateChange(period: Period) {\n    setStartDate(period.startDate);\n    setEndDate(period.endDate);\n  }\n\n  function handleFocusedChange(focusedInput: FocusedInput) {\n    setFocusedInput(focusedInput);\n  }\n  return (\n    <>\n      <DateRangePicker\n        startDate={startDate}\n        startDateId=\"startDate\"\n        endDate={endDate}\n        endDateId=\"endDate\"\n        showDefaultInputIcon={true}\n        onDatesChange={handleDateChange}\n        focusedInput={focusedInput}\n        onFocusChange={handleFocusedChange}\n        small={true}\n      />\n    </>\n  );\n};\n\nexport default Calendar;\n","import React from \"react\";\nimport SearchBar from \"../components/SearchBar\";\nimport Calendar from \"../components/Calendar\";\n\nconst Orders = () => {\n  return (\n    <div className=\"container orders\">\n      <SearchBar />\n      <Calendar />\n    </div>\n  );\n};\n\nexport default Orders;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Orders from \"./pages/Orders\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/orders\" component={Orders} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}